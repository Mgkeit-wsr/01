import { Markup, Scenes } from "telegraf";
import { Vacancies, VacanciesCollector, Workers } from "../database";

const scene = new Scenes.WizardScene(
  "vacancy-create-scene",
  async (ctx) => {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", {
      reply_markup: { remove_keyboard: true },
    });
    return ctx.wizard.next();
  },
  async (ctx) => {
    await VacanciesCollector.set(
      `${ctx.message!.from.id}.name`,
      //@ts-ignore
      ctx.message.text
    );
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    await VacanciesCollector.set(
      `${ctx.message!.from.id}.salary`,
      //@ts-ignore
      ctx.message.text
    );
    await ctx.reply("–û–ø–∏—à–∏—Ç–µ –≤–∞–∫–∞—Å–Ω–∏—é:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    await VacanciesCollector.set(
      `${ctx.message!.from.id}.description`,
      //@ts-ignore
      ctx.message.text
    );
    const markup = Markup.keyboard([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]).resize();
    await ctx.reply(
      "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf –∏–ª–∏ .docx (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
      markup
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    const {
      //@ts-ignore
      message: { document },
      message,
    } = ctx;
    const vacancy = await VacanciesCollector.get(String(message!.from.id));
    //@ts-ignore
    if (message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å") {
      const markup = Markup.keyboard(["–î–∞", "–ù–µ—Ç"]).oneTime().resize();
      await ctx.reply(
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${vacancy.name}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${vacancy.description}`,
        markup
      );
      return ctx.wizard.next();
    }
    if (document && /\.(docx|pdf)$/i.test(document.file_name)) {
      await VacanciesCollector.set(
        `${message!.from.id}.document`,
        document.file_id
      );
      const markup = Markup.keyboard(["–î–∞", "–ù–µ—Ç"]).oneTime().resize();
      await ctx.reply(
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${vacancy.name}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${vacancy.description}`,
        markup
      );
      await ctx.replyWithMediaGroup([
        {
          media: vacancy.document,
          type: "document",
        },
      ]);
      return ctx.wizard.next();
    }
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf –∏–ª–∏ .docx");
  },
  async (ctx) => {
    //@ts-ignore
    if (ctx.message.text === "–ù–µ—Ç") {
      await ctx.scene.leave();
      return await ctx.scene.enter("vacancy-create-scene");
    }
    const vacancy = await VacanciesCollector.get(`${ctx.message!.from.id}`);
    const wVacancies = (await Vacancies.get(`${ctx.message!.from.id}`)) || [];
    vacancy.id = `${ctx.message!.from.id}-${wVacancies.length}`;
    Vacancies.push(`${ctx.message!.from.id}`, vacancy);
    VacanciesCollector.delete(`${ctx.message!.from.id}`);
    const markup = Markup.keyboard([
      ["üìë –í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", "üî≠ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞"],
      ["‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ]).resize();
    await ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é", markup);
    return ctx.scene.leave();
  }
);
export default scene;
