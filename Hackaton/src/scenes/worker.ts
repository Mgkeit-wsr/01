import { Markup, Scenes } from "telegraf";
import { Workers } from "../database";

const scene = new Scenes.WizardScene(
  "worker-scene",
  async (ctx) => {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    //@ts-ignore
    await Workers.set(`${ctx.message.from.id}.firstname`, ctx.message.text);
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    //@ts-ignore
    await Workers.set(`${ctx.message.from.id}.lastname`, ctx.message.text);
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–±—è:");
    return ctx.wizard.next();
  },
  async (ctx) => {
    //@ts-ignore
    await Workers.set(`${ctx.message.from.id}.description`, ctx.message.text);
    const markup = Markup.keyboard([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]])
      .resize()
      .oneTime();
    await ctx.reply("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf –∏–ª–∏ .docx (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", markup);
    return ctx.wizard.next();
  },
  async (ctx) => {
    //@ts-ignore
    const document = ctx.message.document;
    const markup = Markup.keyboard(["–î–∞", "–ù–µ—Ç"]).oneTime().resize();
    //@ts-ignore
    if (ctx.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å") {
      const user = await Workers.get(String(ctx.message!.from.id));
      await ctx.reply(
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?\n–ò–º—è: ${user.firstname}\n–§–∞–º–∏–ª–∏—è: ${user.lastname}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${user.description}`,
        markup
      );
      return ctx.wizard.next();
    }
    if (document && /\.(docx|pdf)$/i.test(document.file_name)) {
      await Workers.set(
        `${ctx.message!.from.id}.document`,
        //@ts-ignore
        ctx.message.document.file_id
      );
      const user = await Workers.get(String(ctx.message!.from.id));

      await ctx.reply(
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?\n–ò–º—è: ${user.firstname}\n–§–∞–º–∏–ª–∏—è: ${user.lastname}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${user.description}`,
        markup
      );
      await ctx.replyWithMediaGroup([
        {
          media: user.document,
          type: "document",
        },
      ]);
      return ctx.wizard.next();
    }
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf –∏–ª–∏ .docx");
  },
  async (ctx) => {
    //@ts-ignore
    if (ctx.message.text === "–ù–µ—Ç") {
      await ctx.scene.leave();
      return await ctx.scene.enter("worker-scene");
    }
    const markup = Markup.keyboard([
      ["üîé –í–∞–∫–∞–Ω—Å–∏–∏", "üî≠ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞"],
      ["‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", "–ü–∞—Ä—Ç–Ω–µ—Ä—ã"],
    ]).resize();
    await ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫", markup);
    return ctx.scene.leave();
  }
);
export default scene;
